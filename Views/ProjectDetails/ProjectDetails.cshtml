@using System.Security.Claims
@model TaskTrackerDemo.Models.ProjectDetailsViewModel


@{
    ViewData["Title"] = "Project Details";
}

<div class="container-fluid px-4">
    <div class="card shadow mb-4">
        <!-- Project Header -->
        <div class="card-header bg-primary text-white py-3 d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-project-diagram me-2"></i>
                <span class="h5 m-0">@Model.Project.Name</span>
            </div>
            <span class="badge bg-white text-primary">
                <i class="fas fa-percentage me-1"></i> @GetCompletionPercentage(Model.Project)% Complete
            </span>
        </div>
        
        <div class="card-body">
            <!-- Project Meta -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card border-left-primary h-100">
                        <div class="card-body">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-info-circle me-2"></i>Project Info
                            </h6>
                            <div class="project-meta">
                                <p class="mb-2">
                                    <i class="fas fa-user me-2 text-muted"></i>
                                    <strong>Created By:</strong> @Model.Project.CreatedBy
                                </p>
                                <p class="mb-2">
                                    <i class="fas fa-calendar-alt me-2 text-muted"></i>
                                    <strong>Start Date:</strong> @DateTime.Today.ToString("dd MMM yyyy")
                                </p>
                                <p class="mb-0">
                                    <i class="fas fa-flag me-2 text-muted"></i>
                                    <strong>Status:</strong> 
                                    <span class="badge bg-@(GetCompletionPercentage(Model.Project) == 100 ? "success" : "warning")">
                                        @(GetCompletionPercentage(Model.Project) == 100 ? "Completed" : "In Progress")
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Progress Chart -->
                <div class="col-md-8">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-chart-line me-2"></i>Progress
                            </h6>
                            <div class="progress mb-3" style="height: 25px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" 
                                     style="width: @GetCompletionPercentage(Model.Project)%">
                                    @GetCompletionPercentage(Model.Project)%
                                </div>
                            </div>
                            <div class="row text-center">
                                <div class="col-4 border-end">
                                    <h5 class="mb-0">@Model.Project.Tasks.Count</h5>
                                    <small class="text-muted">Total Tasks</small>
                                </div>
                                <div class="col-4 border-end">
                                    <h5 class="mb-0">@Model.Project.Tasks.Count(t => t.Status == "Completed")</h5>
                                    <small class="text-muted">Completed</small>
                                </div>
                                <div class="col-4">
                                    <h5 class="mb-0">@Model.Project.Tasks.Count(t => t.Status != "Completed")</h5>
                                    <small class="text-muted">Remaining</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @{
                var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                bool isProjectCreator = Model.Project.AssigneeId == currentUserId;
            }
            @if (isProjectCreator)
            {
                <button class="btn btn-outline-primary mb-3" data-bs-toggle="modal" data-bs-target="#addViewerModal">
                    <i class="fas fa-eye me-2"></i>Add Viewer
                </button>
            }

            <!-- Tasks Section -->
            <div class="card mb-4 border-top-primary project-task-card">
                <div class="card-header py-3 bg-white">
                    <h5 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-tasks me-2"></i>Project Tasks
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Task</th>
                                    <th>Assigned To</th>
                                    <th>Due Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                            @foreach (var task in Model.Project.Tasks)
                            {
                                <tr id="task-row-@task.Id" data-task-id="@task.Id">
                                    <td>
                                        <i class="fas fa-tasks me-2 text-primary"></i>
                                        <span class="task-title" data-task-id="@task.Id">@task.Title</span>
                                    </td>
                                    <td>
                                        <span class="task-assigned-user" data-task-id="@task.Id">@task.AssignedUser?.FullName</span>
                                    </td>
                                    <td>
                                        <span class="task-due-date" data-task-id="@task.Id">@task.DueDate.ToString("dd MMM yyyy")</span>
                                    </td>

                                    @{
                                        bool isAssignedUser = task.AssignedToId == currentUserId;
                                    }

                                    <td>
                                        @if (isAssignedUser)
                                        {
                                            <div class="d-flex align-items-center">
                                                <select class="form-select form-select-sm status-dropdown" data-task-id="@task.Id">
                                                    <option value="Not Started" selected="@(task.Status == "Not Started")">Not Started</option>
                                                    <option value="In-Progress" selected="@(task.Status == "In-Progress")">In-Progress</option>
                                                    <option value="Completed" selected="@(task.Status == "Completed")">Completed</option>
                                                </select>
                                                <button class="btn btn-success btn-sm ms-2 save-status-btn" data-task-id="@task.Id" style="display: none;">✔️</button>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="badge bg-@GetStatusColor(task.Status)">
                                                @task.Status
                                            </span>
                                        }
                                    </td>

                                    <td>
                                        @if (Model.Project.AssigneeId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
                                        {
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-primary dropdown-toggle"
                                                        type="button" id="taskActions-@task.Id"
                                                        data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-cog"></i> Actions
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="taskActions-@task.Id">
                                                    <li>
                                                        <a class="dropdown-item" href="#" data-bs-toggle="modal"
                                                        data-bs-target="#editTaskModal-@task.Id">
                                                            <i class="fas fa-edit me-2"></i>Edit Task
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item delete-task-btn" href="#"
                                                        data-task-id="@task.Id" data-bs-toggle="modal"
                                                        data-bs-target="#deleteTaskModal-@task.Id">
                                                            <i class="fas fa-trash me-2"></i>Delete Task
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="#" data-bs-toggle="modal"
                                                        data-bs-target="#reassignTaskModal-@task.Id">
                                                            <i class="fas fa-user-friends me-2"></i>Reassign Task
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-secondary" disabled title="Only the project creator can manage tasks">
                                                <i class="fas fa-cog"></i> Actions
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


            <!-- Discussion Section -->
            <div class="card border-top-primary">
                <div class="card-header py-3 bg-white">
                    <h5 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-comments me-2"></i>Discussion
                    </h5>
                </div>
                <div class="card-body">
                    <div class="discussion-feed mb-4 scrollable-discussion">
                        @foreach (var msg in Model.Project.Discussions)
                        {
                            <div class="d-flex mb-3">
                                <div class="flex-shrink-0">
                                    <div class="avatar bg-primary text-white rounded-circle p-2">
                                        @msg.User.Substring(0, 1)
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <div class="card">
                                        <div class="card-body p-3">
                                            <div class="d-flex justify-content-between">
                                                <h6 class="mb-1">@msg.User</h6>
                                                <small class="text-muted">@msg.Timestamp.ToString("g")</small>
                                            </div>
                                            <p class="mb-0">@msg.Message</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <form asp-controller="ProjectDetails" asp-action="AddDiscussion" method="post" class="mt-4">
                        <input type="hidden" name="projectId" value="@Model.Project.Id" />
                        <div class="input-group">
                            <textarea name="message" class="form-control" 
                                    placeholder="Type your message..." required rows="3"></textarea>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane me-2"></i>Send
                            </button>
                        </div>
                        @Html.AntiForgeryToken()
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


@foreach (var task in Model.Project.Tasks)
    {
        <!-- Edit Task Modal -->
        <div class="modal fade" id="editTaskModal-@task.Id" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form class="edit-task-form" asp-controller="ProjectDetails" asp-action="EditTask" method="post">
                        <input type="hidden" name="taskId" value="@task.Id" />
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Task</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Task Name</label>
                            <input type="text" class="form-control" name="title" value="@task.Title" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Due Date</label>
                            <input type="date" class="form-control" name="dueDate"
                                value="@task.DueDate.ToString("yyyy-MM-dd")" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Task Modal -->
    <div class="modal fade" id="deleteTaskModal-@task.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form class="delete-task-form" data-task-id="@task.Id" asp-controller="ProjectDetails" asp-action="DeleteTask" method="post">
                    <input type="hidden" name="taskId" value="@task.Id" />
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete the task "@task.Title"?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Reassign Task Modal -->
    <div class="modal fade" id="reassignTaskModal-@task.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form class="reassign-task-form" asp-controller="ProjectDetails" asp-action="ReassignTask" method="post">
                    <input type="hidden" name="taskId" value="@task.Id" />
                    <div class="modal-header">
                        <h5 class="modal-title">Reassign Task</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <label class="form-label">Assign To</label>
                        <select class="form-select" name="assignedToId" required>
                            @if (ViewBag.TeamMembers != null && ViewBag.TeamMembers.Count > 0)
                            {
                                foreach (var member in ViewBag.TeamMembers)
                                {
                                    <option value="@member.Id" selected="@(member.Id == task.AssignedToId)">
                                        @member.FullName
                                    </option>
                                }
                            }
                            else
                            {
                                <option value="">No team members available</option>
                            }
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Reassign</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@* Modal for Viewers *@
<div class="modal fade" id="addViewerModal" tabindex="-1" aria-labelledby="addViewerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <form asp-controller="ProjectDetails" asp-action="AddViewers" method="post">
      <input type="hidden" name="projectId" value="@Model.Project.Id" />
      @Html.AntiForgeryToken()
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addViewerModalLabel">Select Users to View Project</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">

          <div class="mb-3">
            <input type="text" class="form-control" id="userSearch" placeholder="Search users..." onkeyup="filterUsers()" />
          </div>

          <div class="form-group" style="max-height: 300px; overflow-y: auto;">
            <div class="row" id="userList">
              @foreach (var user in Model.AllUsers)
              {
                <div class="col-md-6 user-item">
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" name="viewerIds" value="@user.Id" id="user_@user.Id">
                    <label class="form-check-label" for="user_@user.Id">
                      @user.FullName (@user.Email)
                    </label>
                  </div>
                </div>
              }
            </div>
          </div>

        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Add Viewers</button>
        </div>
      </div>
    </form>
  </div>
</div>


<style>

    .project-task-card table tr {
        position: relative;
    }

    .project-task-card .dropdown {
    position: relative;
    }

    .project-task-card .dropdown-menu {
        z-index: 9999;
        position: absolute !important;
        top: 100%;
        left: auto;
        right: 0;
        margin-top: 4px;
    }

    .project-task-card .table-hover tbody tr:hover {
        z-index: 10;
        position: relative;
    }

    .project-task-card .table-hover tbody tr:hover > td {
        background-color: #f8f9fa;
    }

    .scrollable-discussion {
        max-height: 300px;
        overflow-y: auto;
    }
</style>



@section Scripts {
    <script>
        $(document).ready(function () {

            // EDIT: update title and due date
            $('.edit-task-form').on('submit', function (e) {
                e.preventDefault();

                const $form = $(this);
                const formData = $form.serialize();
                const taskId = $form.find('input[name="taskId"]').val();

                $.post($form.attr('action'), formData, function () {
                    const newTitle = $form.find('input[name="title"]').val();
                    const newDate = new Date($form.find('input[name="dueDate"]').val())
                        .toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });

                    $('.task-title[data-task-id="' + taskId + '"]').text(newTitle);
                    $('.task-due-date[data-task-id="' + taskId + '"]').text(newDate);

                    $form.closest('.modal').modal('hide');
                }).fail(function () {
                    alert('Error updating task');
                });
            });

            // DELETE: delete task row
             $(document).on('submit', '.delete-task-form', function (e) {
                e.preventDefault();

                const $form = $(this);
                const taskId = $form.data('task-id');

                $.ajax({
                    type: 'POST',
                    url: $form.attr('action'),
                    data: $form.serialize(),
                    success: function (response) {
                        // Hide the modal
                        $form.closest('.modal').modal('hide');

                        // Remove the task row
                        $(`#task-row-${taskId}`).remove();

                        // Optionally show a toast or console log
                        console.log('Task deleted successfully');
                    },
                    error: function () {
                        alert('An error occurred while deleting the task.');
                    }
                });
            });

            // REASSIGN: change assigned user (example, on dropdown change or button click)
            $(document).on('submit', '.reassign-task-form', function (e) {
                e.preventDefault();

                const $form = $(this);
                const taskId = $form.find('input[name="taskId"]').val();
                const assignedToId = $form.find('select[name="assignedToId"]').val();

                $.post('/ProjectDetails/ReassignTask', { taskId, assignedToId }, function () {
                    const newUserName = $form.find('select[name="assignedToId"] option:selected').text();
                    $('.task-assigned-user[data-task-id="' + taskId + '"]').text(newUserName);

                    $form.closest('.modal').modal('hide');
                }).fail(function () {
                    alert('Failed to reassign task');
                });
            });
        });


        //Script to change status
        document.addEventListener("DOMContentLoaded", function () {
            const dropdowns = document.querySelectorAll('.status-dropdown');
            const saveButtons = document.querySelectorAll('.save-status-btn');

            dropdowns.forEach(dropdown => {
                dropdown.addEventListener('change', function () {
                    const taskId = this.getAttribute('data-task-id');
                    const saveButton = document.querySelector(`.save-status-btn[data-task-id="${taskId}"]`);
                    if (saveButton) {
                        saveButton.style.display = 'inline-block';
                    }
                });
            });

            saveButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const taskId = this.getAttribute('data-task-id');
                    const dropdown = document.querySelector(`.status-dropdown[data-task-id="${taskId}"]`);
                    const newStatus = dropdown.value;
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    const formData = new FormData();
                    formData.append("id", taskId);
                    formData.append("status", newStatus);
                    formData.append("__RequestVerificationToken", token);

                    fetch('/ProjectDetails/UpdateStatus', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("Status updated successfully");
                            button.style.display = 'none';
                        } else {
                            alert("Failed to update status");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while updating status");
                    });
                });
            });
        });

        // Searchbox script for Add Viewer
            function filterUsers() {
            var input = document.getElementById("userSearch");
            var filter = input.value.toLowerCase();
            var users = document.getElementsByClassName("user-item");

            Array.from(users).forEach(function (user) {
                const text = user.innerText.toLowerCase();
                user.style.display = text.includes(filter) ? "" : "none";
            });
            }
        </script>
}




@functions {
    int GetCompletionPercentage(Project project) {
        if (project.Tasks.Count == 0) return 0;
        var completed = project.Tasks.Count(t => t.Status == "Completed");
        return (int)((completed / (double)project.Tasks.Count) * 100);
    }

    string GetStatusColor(string status) => status switch
    {
        "Completed" => "success",
        "In Progress" => "warning",
        _ => "secondary"
    };

}